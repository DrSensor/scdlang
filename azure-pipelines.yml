# TODO:
# 1. Cross compilation targeting different architectures using `cross`
#     see https://nbsoftsolutions.com/blog/azure-pipelines-for-rust-projects

strategy:
  matrix:
    linux:
      target: 'x86_64-unknown-linux-gnu'
      imageName: 'ubuntu-16.04'
      rustup_toolchain: beta
    alpine:
      target: 'x86_64-unknown-linux-musl'
      imageName: 'ubuntu-16.04'
      rustup_toolchain: beta
    mac:
      target: 'x86_64-apple-darwin'
      imageName: 'macos-10.13'
      rustup_toolchain: beta
    windows:
      target: 'x86_64-pc-windows-msvc'
      imageName: 'windows-2019'
      rustup_toolchain: beta
    # TODO: enable this when https://github.com/rust-lang/rust/issues/53454 resolved
    # mingw:
    #   target: 'x86_64-pc-windows-gnu'
    #   imageName: 'windows-2019'
    #   rustup_toolchain: beta

pool:
  vmImage: $(imageName)

# trigger:
#   tags:
#     include:
#     - v*

trigger:
  branches:
    include: ['*']
  tags:
    include: ['*']

steps:
- script: |
    curl -sSf -o rustup-init.exe https://win.rustup.rs
    rustup-init.exe -y --default-toolchain %RUSTUP_TOOLCHAIN%
    echo "##vso[task.setvariable variable=PATH;]%PATH%;%USERPROFILE%\.cargo\bin"
  displayName: Windows install rust
  condition: eq( variables['Agent.OS'], 'Windows_NT' )
- script: |
    curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain $RUSTUP_TOOLCHAIN
    echo "##vso[task.setvariable variable=PATH;]$PATH:$HOME/.cargo/bin"
  displayName: Install rust
  condition: ne( variables['Agent.OS'], 'Windows_NT' )

- script: rustup target add $(TARGET)
  displayName: Install target toolchain

# TODO: Remove this when backtrace-sys don't cause trouble or this project can be compiled on stable channel
- script: sudo apt-get install musl-tools
  displayName: Install musl-gcc
  condition: contains( variables['target'], 'musl' )

- script: cargo build --release --target $(TARGET)
  displayName: Build release

- task: CopyFiles@2
  inputs:
    sourceFolder: '$(Build.SourcesDirectory)/target/$(TARGET)/release'
    contents: |
      scrap
      scrap.exe
    targetFolder: '$(Build.BinariesDirectory)/scrap'
- task: ArchiveFiles@2
  inputs:
    rootFolderOrFile: '$(Build.BinariesDirectory)/scrap'
    archiveType: 'tar'
    tarCompression: 'gz'
    archiveFile: '$(Build.ArtifactStagingDirectory)/scrap-$(TARGET).tar.gz'
- task: PublishBuildArtifacts@1
  inputs:
    artifactName: 'scrap'

# https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/utility/github-release?view=azure-devops
- task: GitHubRelease@0
  # condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
  condition: succeeded()
  inputs:
    gitHubConnection: drsensor
    title: ($(Build.SourceBranch) -> $(Build.SourceBranchName)) $(Build.SourceVersionMessage)
    repositoryName: $(Build.Repository.Name)
    action: edit
    tag: $(Build.SourceBranch)
    assets: $(Build.ArtifactStagingDirectory)/scrap-$(TARGET).tar.gz
    assetUploadMode: replace
    isDraft: true
    addChangeLog: true